definitions:
  AdminAuthResponse:
    properties:
      admin:
        $ref: '#/definitions/AdminResponse'
      token:
        type: string
    type: object
  AdminCreateCollaborationRequest:
    properties:
      badges:
        items:
          type: string
        type: array
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        type: string
      opportunity_id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  AdminCreateUserRequest:
    properties:
      avatar_url:
        type: string
      badges:
        items:
          type: string
        type: array
      chat_id:
        type: integer
      description:
        type: string
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        type: string
      name:
        type: string
      opportunity_ids:
        items:
          type: string
        type: array
      title:
        type: string
      username:
        type: string
    type: object
  AdminResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  AdminTelegramAuthRequest:
    properties:
      query:
        description: Telegram init data
        type: string
    type: object
  AuthTelegramRequest:
    properties:
      query:
        type: string
    type: object
  Badge:
    properties:
      color:
        type: string
      created_at:
        type: string
      icon:
        type: string
      id:
        type: string
      text:
        type: string
    type: object
  BadgeResponse:
    properties:
      color:
        type: string
      icon:
        type: string
      id:
        type: string
      text:
        type: string
    type: object
  BotBlockedResponse:
    properties:
      message:
        type: string
      status:
        type: string
      username:
        type: string
    type: object
  City:
    properties:
      country_code:
        type: string
      country_name:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  CityResponse:
    properties:
      country_code:
        type: string
      country_name:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  Collaboration:
    properties:
      badges:
        items:
          $ref: '#/definitions/Badge'
        type: array
      created_at:
        type: string
      description:
        type: string
      has_interest:
        type: boolean
      hidden_at:
        type: string
      id:
        type: string
      is_payable:
        type: boolean
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        $ref: '#/definitions/City'
      opportunity:
        $ref: '#/definitions/Opportunity'
      title:
        type: string
      user:
        $ref: '#/definitions/User'
      user_id:
        type: string
      verification_status:
        $ref: '#/definitions/VerificationStatus'
      verified_at:
        type: string
    type: object
  CollaborationResponse:
    properties:
      badges:
        items:
          $ref: '#/definitions/BadgeResponse'
        type: array
      created_at:
        type: string
      description:
        type: string
      has_interest:
        type: boolean
      id:
        type: string
      is_payable:
        type: boolean
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        $ref: '#/definitions/CityResponse'
      opportunity:
        $ref: '#/definitions/OpportunityResponse'
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/UserProfileResponse'
      user_id:
        type: string
      verification_status:
        $ref: '#/definitions/VerificationStatus'
    type: object
  CreateBadgeRequest:
    properties:
      color:
        type: string
      icon:
        type: string
      text:
        type: string
    type: object
  CreateCollaboration:
    properties:
      badge_ids:
        items:
          type: string
        type: array
      description:
        type: string
      is_payable:
        type: boolean
      location_id:
        type: string
      opportunity_id:
        type: string
      title:
        type: string
    type: object
  ErrorResponse:
    properties:
      error:
        type: string
    type: object
  Link:
    properties:
      icon:
        description: Optional icon for the link
        type: string
      label:
        type: string
      order:
        type: integer
      type:
        description: e.g., "github", "linkedin", "website", "portfolio"
        type: string
      url:
        type: string
    type: object
  LoginMeta:
    properties:
      city:
        type: string
      country:
        type: string
      ip:
        type: string
      user_agent:
        type: string
    type: object
  Opportunity:
    properties:
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      description_ru:
        type: string
      icon:
        type: string
      id:
        type: string
      text:
        type: string
      text_ru:
        type: string
    type: object
  OpportunityResponse:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      text:
        type: string
    type: object
  StatusResponse:
    properties:
      success:
        type: boolean
    type: object
  UpdateUserLinksRequest:
    properties:
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
    type: object
  UpdateUserRequest:
    properties:
      badge_ids:
        items:
          type: string
        type: array
      description:
        type: string
      location_id:
        type: string
      name:
        type: string
      opportunity_ids:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  User:
    properties:
      avatar_url:
        type: string
      badges:
        items:
          $ref: '#/definitions/Badge'
        type: array
      chat_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      hidden_at:
        type: string
      id:
        type: string
      is_following:
        type: boolean
      language_code:
        type: string
      last_active_at:
        type: string
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        $ref: '#/definitions/City'
      login_metadata:
        $ref: '#/definitions/LoginMeta'
      name:
        type: string
      opportunities:
        items:
          $ref: '#/definitions/Opportunity'
        type: array
      title:
        type: string
      username:
        type: string
      verification_status:
        $ref: '#/definitions/VerificationStatus'
      verified_at:
        type: string
    type: object
  UserProfileResponse:
    properties:
      avatar_url:
        type: string
      badges:
        items:
          $ref: '#/definitions/BadgeResponse'
        type: array
      description:
        type: string
      id:
        type: string
      is_following:
        type: boolean
      last_active_at:
        type: string
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        $ref: '#/definitions/CityResponse'
      name:
        type: string
      opportunities:
        items:
          $ref: '#/definitions/OpportunityResponse'
        type: array
      title:
        type: string
      username:
        type: string
    type: object
  UserResponse:
    properties:
      avatar_url:
        type: string
      badges:
        items:
          $ref: '#/definitions/BadgeResponse'
        type: array
      chat_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      hidden_at:
        type: string
      id:
        type: string
      language_code:
        type: string
      last_active_at:
        type: string
      links:
        items:
          $ref: '#/definitions/Link'
        type: array
      location:
        $ref: '#/definitions/CityResponse'
      name:
        type: string
      opportunities:
        items:
          $ref: '#/definitions/OpportunityResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
      username:
        type: string
      verification_status:
        $ref: '#/definitions/VerificationStatus'
    type: object
  VerificationStatus:
    enum:
    - pending
    - verified
    - denied
    - blocked
    - unverified
    type: string
    x-enum-varnames:
    - VerificationStatusPending
    - VerificationStatusVerified
    - VerificationStatusDenied
    - VerificationStatusBlocked
    - VerificationStatusUnverified
  VerificationUpdateRequest:
    properties:
      status:
        $ref: '#/definitions/VerificationStatus'
    type: object
host: api.peatch.io
info:
  contact: {}
  description: API Documentation for the Api Dating Project
  title: Peatch API
  version: "1.0"
paths:
  /admin/auth/telegram:
    post:
      consumes:
      - application/json
      operationId: admin-telegram-auth
      parameters:
      - description: Telegram Auth Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/AdminTelegramAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
      - admin
  /admin/badges:
    get:
      consumes:
      - application/json
      operationId: admin-list-badges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Badge'
            type: array
      security:
      - ApiKeyAuth: []
      tags:
      - admin
    post:
      consumes:
      - application/json
      operationId: admin-create-badge
      parameters:
      - description: Badge data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateBadgeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Badge'
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /admin/cities/{name}:
    get:
      consumes:
      - application/json
      operationId: admin-get-city-by-name
      parameters:
      - description: City name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/CityResponse'
            type: array
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /admin/collaborations:
    get:
      consumes:
      - application/json
      description: Get a list of collaborations filtered by verification status
      operationId: admin-list-collaborations
      parameters:
      - description: Verification status (pending, verified, denied, blocked)
        in: query
        name: status
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CollaborationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List collaborations by verification status
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new collaboration for a user as admin
      operationId: admin-create-collaboration
      parameters:
      - description: Collaboration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/AdminCreateCollaborationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Collaboration'
      security:
      - ApiKeyAuth: []
      summary: Create collaboration as admin
      tags:
      - admin
  /admin/opportunities:
    get:
      consumes:
      - application/json
      operationId: admin-list-opportunities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Opportunity'
            type: array
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of users filtered by verification status
      operationId: admin-list-users
      parameters:
      - description: Verification status (pending, verified, denied, blocked)
        in: query
        name: status
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List users by verification status
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new user with optional fields as admin
      operationId: admin-create-user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user as admin
      tags:
      - admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user and all their related data including collaborations
        and followers
      operationId: admin-delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user completely
      tags:
      - admin
  /admin/users/{id}/collaborations:
    get:
      consumes:
      - application/json
      operationId: admin-get-users-collaborations
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Collaboration'
            type: array
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /admin/users/{id}/verify:
    put:
      consumes:
      - application/json
      description: Change the verification status of a user
      operationId: admin-update-user-verification
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: New verification status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/VerificationUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user verification status
      tags:
      - admin
  /admin/users/{user_id}/collaborations/{collab_id}/verify:
    put:
      consumes:
      - application/json
      description: Change the verification status of a collaboration
      operationId: admin-update-collaboration-verification
      parameters:
      - description: Collaboration ID
        in: path
        name: id
        required: true
        type: string
      - description: New verification status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/VerificationUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update collaboration verification status
      tags:
      - admin
  /admin/users/{username}:
    get:
      consumes:
      - application/json
      operationId: admin-get-user-by-username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /admin/users/chat/{id}:
    get:
      consumes:
      - application/json
      operationId: admin-get-user-by-chat-id
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
      security:
      - ApiKeyAuth: []
      tags:
      - admin
  /api/badges:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/BadgeResponse'
            type: array
      summary: List badges
      tags:
      - badges
  /api/badges/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Badge ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BadgeResponse'
      summary: Get badge
      tags:
      - badges
  /api/collaborations:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Order by
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/CollaborationResponse'
            type: array
      summary: List collaborations
      tags:
      - collaborations
    post:
      consumes:
      - application/json
      parameters:
      - description: Collaboration data
        in: body
        name: collaboration
        required: true
        schema:
          $ref: '#/definitions/CreateCollaboration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/CollaborationResponse'
      summary: Create collaboration
      tags:
      - collaborations
  /api/collaborations/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Collaboration ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CollaborationResponse'
      summary: Get collaboration
      tags:
      - collaborations
    put:
      consumes:
      - application/json
      parameters:
      - description: Collaboration data
        in: body
        name: collaboration
        required: true
        schema:
          $ref: '#/definitions/CreateCollaboration'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CollaborationResponse'
      summary: Update collaboration
      tags:
      - collaborations
  /api/collaborations/{id}/interest:
    post:
      consumes:
      - application/json
      parameters:
      - description: Collaboration ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: When user has blocked the bot, returns username for direct
            Telegram navigation
          schema:
            $ref: '#/definitions/BotBlockedResponse'
        "204":
          description: No Content
      summary: Express interest in a collaboration
      tags:
      - collaborations
  /api/locations:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/CityResponse'
            type: array
      summary: List cities
      tags:
      - cities
  /api/opportunities:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/OpportunityResponse'
            type: array
      summary: List opportunities
      tags:
      - opportunities
  /api/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Order by
        in: query
        name: order
        type: string
      - description: Search
        in: query
        name: search
        type: string
      - description: Find similar
        in: query
        name: find_similar
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/UserProfileResponse'
            type: array
      summary: List users
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
      summary: Update user
      tags:
      - users
  /api/users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID or username
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserProfileResponse'
      summary: Get user
      tags:
      - users
  /api/users/{id}/follow:
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID to follow
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: When user has blocked the bot, returns username for direct
            Telegram navigation
          schema:
            $ref: '#/definitions/BotBlockedResponse'
        "204":
          description: No Content
      summary: Follow user
      tags:
      - users
  /api/users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Upload a photo for the authenticated user to S3 and store record
        in database
      parameters:
      - description: Photo file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload user photo
      tags:
      - photos
  /api/users/links:
    put:
      consumes:
      - application/json
      parameters:
      - description: User links data
        in: body
        name: links
        required: true
        schema:
          $ref: '#/definitions/UpdateUserLinksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
      summary: Update user links
      tags:
      - users
  /api/users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
      summary: Get current user
      tags:
      - users
  /api/users/publish:
    post:
      consumes:
      - application/json
      description: Makes the user profile visible by setting hidden_at to null
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StatusResponse'
      summary: Publish user profile
      tags:
      - users
  /auth/telegram:
    post:
      description: Authenticate user via Telegram using init data
      parameters:
      - description: Telegram Auth Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/AuthTelegramRequest'
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Telegram Auth
      tags:
      - auth
schemes:
- https
swagger: "2.0"
